[{"title":"VBS | Delete specified file or folder.","description":"Sample source code of a function to delete files and folders using VBS","date":"2020-02-23T00:00:00.000Z","emoji":"üê∂","tags":["vbs"],"published":true,"body":{"raw":" Here is a sample source code of a function to delete files and folders using VBS.  ## Sample Code  ```vb Option Explicit  DeleteFolder \"C:\\sample\" DeleteFile \"C:\\test\\test.txt\"  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' @brief : Delete the specified file. ' @note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub DeleteFile (ByVal strFile)   Dim objFso  Set objFso = CreateObject(\"Scripting.FileSystemObject\")   ' delete file  objFso.DeleteFile strFile,True   Set objFso = Nothing  End Sub  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' @brief : Delete the specified folder. ' @note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub DeleteFolder (ByVal strFolder)   Dim objFso  Set objFso = CreateObject(\"Scripting.FileSystemObject\")   ' delete folder  objFso.DeleteFolder strFolder,True    Set objFso = Nothing  End Sub ```  ## Additional information.  `FileSystemObject.DeleteFolder` Function:    - Parameter 1:    - Folder to be deleted. - Parameter 2:   - True: Delete read-only files as well.   - False (default): Do not delete read-only files."},"_id":"blog/1-delete-file-folder-vbs.mdx","_raw":{"sourceFilePath":"blog/1-delete-file-folder-vbs.mdx","sourceFileName":"1-delete-file-folder-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/1-delete-file-folder-vbs"},"type":"Post","slug":"/blog/1-delete-file-folder-vbs","slugAsParams":"1-delete-file-folder-vbs"},{"title":"VBS | Getting the current folder.","description":"Sample source code of a function in VBS to retrieve the path of the current folder","date":"2020-02-24T00:00:00.000Z","emoji":"üìÅ","tags":["vbs"],"published":true,"body":{"raw":" Here is a sample source code of a function in VBS to retrieve the path of the current folder.  ## Sample Code  ```vb Option Explicit  Msgbox GetCurrentDirectory()  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' breif : Getting the current folder ' note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCurrentDirectory()      Dim objWshShell     ' WshShell object      Set objWshShell = WScript.CreateObject(\"WScript.Shell\")     If Err.Number <> 0 Then         WScript.Echo \"error: \" & Err.Description         wscript.quit(1)     End If     GetCurrentDirectory = objWshShell.CurrentDirectory  End Function ```  ## Explanation  This script retrieves the current folder (also known as the current directory) in which the VBS file (executable file) is located.  *Note: The terms \"current folder\" and \"current directory\" are used interchangeably.*"},"_id":"blog/2-get-current-folder-vbs.mdx","_raw":{"sourceFilePath":"blog/2-get-current-folder-vbs.mdx","sourceFileName":"2-get-current-folder-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/2-get-current-folder-vbs"},"type":"Post","slug":"/blog/2-get-current-folder-vbs","slugAsParams":"2-get-current-folder-vbs"},{"title":"VBS | Retrieving Data from an ini File","description":"This guide explains how to retrieve data stored in a Config.ini file.","date":"2020-02-25T00:00:00.000Z","emoji":"üîß","tags":["vbs"],"published":true,"body":{"raw":" This guide explains how to retrieve data stored in a Config.ini file.  ## Folder Structure Retrieve data contained within the Config.ini as shown in the structure below:  ``` textfile Any Folder  ‚îú Config.ini  ‚îî GetIniData.vbs ```  ## Sample Source  Config.ini:  ``` ini [test1] data1=00000 data2=11111 [test2] data3=abcde data4=fghij ```  GetIniData.vbs:  ``` vb Option Explicit  Msgbox GetIniData(GetCurrentDirectory() & \"\\Config.ini\", \"test1\", \"data1\")  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Get the current directory. ' note:  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCurrentDirectory()      Dim objWshShell     ' WshShell object      Set objWshShell = WScript.CreateObject(\"WScript.Shell\")     If Err.Number <> 0 Then         WScript.Echo \"Error: \" & Err.Description         wscript.quit(1)     End If     GetCurrentDirectory = objWshShell.CurrentDirectory  End Function  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Retrieve data from an INI file using section name and parameter name. ' note : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetIniData(strIniFileName, strSection, strKey)      Dim objFSO, objIniFile, objSectionDic, strReadLine, objKeyDic, arrReadLine     Dim strTempSection, objTempdic      ' File I/O constants     Const conForReading = 1, conForWriting = 2, conForAppending = 8     Set objFSO = CreateObject(\"Scripting.FileSystemObject\")      ' Open the file     Set objIniFile = objFSO.OpenTextFile(strIniFileName, conForReading, False)     If Err.Number <> 0 Then         ' Output an error message         wscript.echo \"INI File Name: \" & strIniFileName         wscript.quit(1)     End If      ' Create a storage Dictionary object     Set objSectionDic = CreateObject(\"Scripting.Dictionary\")      ' Read from the file     strReadLine = objIniFile.ReadLine     Do While objIniFile.AtEndofStream = False         ' Search for the start of a statement         If (strReadLine <> \" \") And (StrComp(\"[]\", (Left(strReadLine, 1) & Right(strReadLine, 1))) = 0) Then             ' Retrieve the section name             strTempSection = Mid(strReadLine, 2, (Len(strReadLine) - 2))             ' Create a Dictionary object for keys             Set objKeyDic = CreateObject(\"Scripting.Dictionary\")             ' Loop until the end of the file             Do While objIniFile.AtEndofStream = False                 strReadLine = objIniFile.ReadLine                 If (strReadLine <> \"\") And (StrComp(\";\", Left(strReadLine, 1)) <> 0) Then                     ' Exit loop when the next statement starts                     If StrComp(\"[]\", (Left(strReadLine, 1) & Right(strReadLine, 1))) = 0 Then                         Exit Do                     End If                     ' Store definitions within a section in the Dictionary object                     arrReadLine = Split(strReadLine, \"=\", 2, vbTextCompare)                     objKeyDic.Add UCase(arrReadLine(0)), arrReadLine(1)                 End If             Loop             ' Store in the object             objSectionDic.Add UCase(strTempSection), objKeyDic         Else             strReadLine = objIniFile.ReadLine         End If     Loop     ' Close the file     objIniFile.Close      ' Retrieve data corresponding to the specified section and parameter from the INI array     strSection = UCase(strSection)  ' Convert to uppercase     strKey = UCase(strKey)          ' Convert to uppercase      If objSectionDic.Exists(strSection) Then         Set objTempdic = objSectionDic.Item(strSection)         If objTempdic.Exists(strKey) Then             GetIniData = objSectionDic(strSection)(strKey)             Exit Function         End If     End If     GetIniData = \"\"  End Function ```  ## Explanation  When extracting data from an INI file, each data from the `Settings.ini` is stored in a dictionary object. Then, you retrieve the data based on the section (e.g., `[test1]`) and parameter name (e.g., `data1`).  In the provided sample, the code is set to read an INI file from the current directory. If you want to reference a different folder, you can modify the code to specify the path of the INI file."},"_id":"blog/3-get-ini-data-vbs.mdx","_raw":{"sourceFilePath":"blog/3-get-ini-data-vbs.mdx","sourceFileName":"3-get-ini-data-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/3-get-ini-data-vbs"},"type":"Post","slug":"/blog/3-get-ini-data-vbs","slugAsParams":"3-get-ini-data-vbs"},{"title":"Scrolling the code embedded in a post of the WordPress Hestia theme horizontally.","description":"This is an article for those using the WordPress theme \"Hestia. \"When embedding source code on a post page, is there a concern that it might wrap and become hard to read?","date":"2020-02-26T00:00:00.000Z","emoji":"üêµ","tags":["wordpress","css"],"published":true,"body":{"raw":" This is an article for those using the WordPress theme \"Hestia.\"  When embedding source code on a post page, is there a concern that it might wrap and become hard to read?  This time, we will explain a solution using additional CSS.  Added on 3/22/2020: It has been discovered that by \"‚ë† selecting the (source code) block\" and then choosing \"‚ë° change block type to Preformatted, \" you can achieve scrollability. This feature is sufficient.  ![image](/blog/4/seikeizumi.png)  ## Making Source Code Display on the Web More Readable  If you have lengthy code samples displayed horizontally like the one below, they might automatically wrap and become difficult to read.  ```py def __line(self, message):     if len(self.line_notify_token) > 0:         requests.post('https://notify-api.line.me/api/notify', headers={'Authorization': 'Bearer ' + self.line_notify_token}, data={'message': '\\n' + message}) ```  ## Additional CSS Setup  Now, let's set up additional CSS to achieve horizontal scrolling for the source code. First, navigate to the Customizer of WordPress and go to the edit screen for additional CSS.  ![image](/blog/4/main.png)  Next, enter the following code:  ![image](/blog/4/add_css.png)  ```css pre.scrollable-code {     overflow-x: auto;     margin-bottom: 1em;     white-space: pre;     max-width: 770px;     word-wrap: normal; } ```  ## Editing Code in the Post Editor  To apply the additional CSS, edit the code directly in the post editor. On the post editing screen, switch to the \"Code Editor\" view.  ![image](/blog/4/code_editer. PNG)  Since it will display HTML, look for the block where you embedded the source code.   It's the part enclosed in `<pre class=\"wp-block-code\"><code>...</code></pre>`.  ```html <!-- wp:code --> <pre class=\"wp-block-code\"><code>    def __line(self, message):         if len(self.line_notify_token) > 0:             requests.post('https://notify-api.line.me/api/notify', headers={'Authorization': 'Bearer ' + self.line_notify_token}, data={'message': '\\n' + message}) </code></pre> <!-- /wp:code --> ```  For the above code, do the following two things: 1. Change the `pre class` from \"wp-block-code\" to \"scrollable-code\". 2. Remove the ``<wp:code></wp:code>`` tags.  It should look like the code below:  ```html <!-- wp:code --> <pre class=\"scrollable-code\">    def __line(self, message):     if len(self.line_notify_token) > 0:         requests.post('https://notify-api.line.me/api/notify', headers={'Authorization': 'Bearer ' + self.line_notify_token}, data={'message': '\\n' + message}) </pre> <!-- /wp:code --> ```  Here is the completed code sample with horizontal scrolling support:  ![image](/blog/4/sample.png)  That's all. "},"_id":"blog/4-scroll-code-wordpress-hestia.mdx","_raw":{"sourceFilePath":"blog/4-scroll-code-wordpress-hestia.mdx","sourceFileName":"4-scroll-code-wordpress-hestia.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/4-scroll-code-wordpress-hestia"},"type":"Post","slug":"/blog/4-scroll-code-wordpress-hestia","slugAsParams":"4-scroll-code-wordpress-hestia"},{"title":"VBS | Saving the results selected from Oracle DB to a CSV file","description":"This time, we will explain a program that uses VBS to save data extracted from an Oracle DB into a CSV file.","date":"2020-02-27T00:00:00.000Z","emoji":"üíø","tags":["vbs","oracle"],"published":true,"body":{"raw":" Is there a need to work with data stored in a database (DB) using a different application?  In such cases, one approach is to first extract the DB data into a CSV file and then read that CSV file from the other application.  ![image](/blog/5/db_to_csv.png)  This time, we will explain a program that uses VBS to save data extracted from an Oracle DB into a CSV file.  The source code can be downloaded from here: ‚Üì   [template-vbs/ExportCsvOracle/](https://github.com/atman-33/template-vbs/tree/master/ExportCsvOracle/ \"Github\")  ## Program Workflow  Although the program's main purpose is to save data extracted from a DB into a CSV file, the general workflow is as follows:  ```text ‚ë† Load necessary configuration information. „ÄÄ‚Üì ‚ë° Connect to the Oracle DB. „ÄÄ‚Üì ‚ë¢ Execute SQL containing the SELECT statement. „ÄÄ‚Üì ‚ë£ Save the executed SQL result to a CSV file. „ÄÄ‚Üì ‚ë§ Disconnect from the Oracle DB. ```  ## Package Structure  The program's functionality isn't contained within a single source file. It involves a folder and file structure, as shown below:  ```text ExportCsvOracle/ ‚îúcsv/ ‚îúsql/ ‚îúConfig.ini ‚îîExportCsvOracle.vbs ```  |Folder/File|Description| |:--|:--| |ExportCsvOracle.vbs|Execution program.| |Config.ini|Configuration information for DB connections and folder paths.| |sql (Folder)|Contains files storing the SELECT statements.| |csv (Folder)|Stores CSV files extracted from the DB.|  ## Explanation of Source Code  For program execution, configuration information will be loaded from an INI file.  ‚ñº Config.ini ```ini [source_db] provider=OraOLEDB.Oracle data_source=TESTDB user_id=system password=sys [path] sql_folder=sql csv_folder=csv ```  The INI file in this case contains the following information:  - Connection information to the DB (Oracle) - Folder name (path) for storing SQL statements - Folder name (path) for storing generated CSV files  This information from the INI file is read and stored in variables within the VBS script for later use. For more details on this process, you can refer to a separate article: [VBS | Getting Data from an INI File](/blog/3-get-ini-data-vbs)  ## Connecting to the Oracle DB  In this section, we prepare functions necessary for various operations with the Oracle DB.  ```vb ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Connect to the DB (Oracle) ' note : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub OpenDBOracle(ByRef objAdoCon, provider, dataSource, user, pass)      If DEBUG_MODE = 1 Then         WScript.Echo \"Connecting to the DB.\"     End If      Dim constr      Set objAdoCon = WScript.CreateObject(\"ADODB.Connection\")      constr = \"Provider=\" & provider & \";Data Source=\" & dataSource _                 & \";User ID=\" & user & \";Password=\" & pass      If DEBUG_MODE = 1 Then         WScript.Echo constr     End If      objAdoCon.ConnectionString = constr     objAdoCon.Open      If DEBUG_MODE = 1 Then         WScript.Echo \"Connected to the DB.\"     End If  End Sub  ' ... (Other DB-related functions) ```  In this context, we will only be using the DB connection and disconnection functions.  You can utilize the variables read from the earlier INI file to perform DB operations like this:  ```vb Dim objAdoCon       ' ADO connection  ' 1. Connect to the DB OpenDBOracle objAdoCon, SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS  ... ... ...  ' 4. Disconnect from the DB CloseDB objAdoCon Set objAdoCon = Nothing ```  ## Executing SQL Statements  Now that we have established a connection to the Oracle DB, let's proceed to explain how to execute SQL statements and retrieve record sets. The workflow for this section is as follows:  Retrieve SQL files from the SQL storage folder **‚Äª One SELECT statement per SQL file**   „ÄÄ‚Üì   Extract SQL statements from SQL files   „ÄÄ‚Üì   Execute SQL statements and retrieve record sets    First, we will prepare functions needed for each step:  ```vb ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Execute SQL SELECT statement and retrieve record set ' note : Return -> Record Set ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function ExcuteSQLgetRS(objAdoCon, strSQL)      Dim objAdoRS  ' Record Set      Set objAdoRS = objAdoCon.Execute(strSQL)      Set ExcuteSQLgetRS = objAdoRS   ' Remember to use Set for objects  End Function  ' ... (Other functions) ```  With these functions, you can proceed to execute SQL statements and retrieve record sets. Though I'll skip detailed explanations, the record set will contain information from the extraction result specified in the SQL SELECT statement.  You can call these functions within your main program code:  ```vb Dim objAdoCon       ' ADO connection Dim strSQLFiles     ' SQL file collection to execute Dim strSQLFile      ' SQL file to execute Dim strSQL          ' SQL to execute Dim objAdoRS        ' ADO record set Dim csvText         ' CSV text obtained from SELECT query  ' 1. Connect to the DB OpenDBOracle objAdoCon, SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS  ' 2. Read SQL file collection strSQLFiles = GetFileNames(SQL_FOLDER_PATH)  ' 3. CSV generation For Each strSQLFile In strSQLFiles                      ' Iterate through each SQL file     strSQL = GetFileText(strSQLFile)                    ' Retrieve the SQL statement     Set objAdoRS = ExcuteSQLgetRS(objAdoCon, strSQL)    ' Execute the SQL statement and get the record set     csvText = GetCSVTextFromRS(objAdoRS)                ' Convert the record set to CSV-formatted text      WriteFile CSV_FOLDER_PATH & \"\\\" & GetBaseName(strSQLFile), csvText, \"csv\"   ' Generate CSV file Next ```  This completes the creation of CSV files.  ## Saving Executed SQL Results to CSV Files  Until now, the SQL results have been stored in a record set. However, to save the data in CSV format, you need to convert the record set into a text format compatible with CSV.  The workflow here is as follows  :  ‚ë† Convert the record set to CSV (text)   „ÄÄ‚Üì   ‚ë° Write the converted text to a CSV file    ```vb ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Convert record set to CSV ' note : Return -> CSV-formatted text ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCSVTextFromRS(ByRef objAdoRS)      Dim csvText     Dim i      csvText = \"\"     Do While objAdoRS.EOF <> True          For i = 0 to objAdoRS.fields.count -1             If i <> objAdoRS.fields.count -1 then                 csvText = csvText & objAdoRS(i).value & \", \"             Else                 csvText = csvText & objAdoRS(i).value             End If         Next         csvText = csvText & vbCrLf         objAdoRS.MoveNext     Loop      objAdoRS.Close     Set objAdoRS = Nothing      If DEBUG_MODE = 1 Then         WScript.Echo csvText     End If     GetCSVTextFromRS = csvText  End Function  ' ... (Other functions) ```  You can incorporate these functions into your main program by adding the following code:  ```vb Dim objAdoCon       ' ADO connection Dim strSQLFiles     ' SQL file collection to execute Dim strSQLFile      ' SQL file to execute Dim strSQL          ' SQL to execute Dim objAdoRS        ' ADO record set Dim csvText         ' CSV text obtained from SELECT query  ' 1. Connect to the DB OpenDBOracle objAdoCon, SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS  ' 2. Read SQL file collection strSQLFiles = GetFileNames(SQL_FOLDER_PATH)  ' 3. CSV generation For Each strSQLFile In strSQLFiles                      ' Iterate through each SQL file     strSQL = GetFileText(strSQLFile)                    ' Retrieve the SQL statement     Set objAdoRS = ExcuteSQLgetRS(objAdoCon, strSQL)    ' Execute the SQL statement and get the record set     csvText = GetCSVTextFromRS(objAdoRS)                ' Convert the record set to CSV-formatted text      WriteFile CSV_FOLDER_PATH & \"\\\" & GetBaseName(strSQLFile), csvText, \"csv\"   ' Generate CSV file Next  ' 4. Disconnect from the DB CloseDB objAdoCon Set objAdoCon = Nothing  If DEBUG_MODE = 1 Then     WScript.Echo \"Process completed.\" End If ```  This concludes the explanation. Using this sample as a base, you can easily implement tasks like extracting the latest logs from a table in the database every hour. For automated repetitive execution, consider using the Task Scheduler on Windows. "},"_id":"blog/5-oracle-db-to-csv-vbs.mdx","_raw":{"sourceFilePath":"blog/5-oracle-db-to-csv-vbs.mdx","sourceFileName":"5-oracle-db-to-csv-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/5-oracle-db-to-csv-vbs"},"type":"Post","slug":"/blog/5-oracle-db-to-csv-vbs","slugAsParams":"5-oracle-db-to-csv-vbs"},{"title":"Power Query | Creating a Calendar for a Specified Period Using Parameter Configuration (Power BI)","description":"When using Power BI, there are instances where you might want to create a calendar based on dates. In this scenario, I'll explain how to automatically generate a calendar for a specified period, which can be quite useful.","date":"2020-03-01T00:00:00.000Z","emoji":"üìä","tags":["powerbi"],"published":true,"body":{"raw":" When using Power BI, there are instances where you might want to create a calendar based on dates. In this scenario, I'll explain how to automatically generate a calendar for a specified period, which can be quite useful.  *Additional Note:* I found that creating the calendar using DAX allows for more flexibility in adding columns. This article serves as a reference for the procedure of utilizing parameters in queries.  ## Calendar Generation Workflow  The steps involve the following workflow:  ‚ë† Parameter Configuration (Considering Multiple Modes)   „ÄÄ‚Üì   ‚ë° Fetching Dates Based on Different Modes   „ÄÄ‚Üì   ‚ë¢ Creating the Calendar    ## Parameter Configuration  For this case, the parameters to be configured are as follows:  ![image](/blog/6/create_calendar.png)  Although it's just specifying a date range, I've added a mode selection feature to accommodate multiple patterns for user convenience.  ### ‚ë† Date Specification Mode  This mode creates a calendar for the specified start and end dates.  ‚ñº Parameter Configuration (Prerequisite)   A_DATE_MODE = 0    ‚ñº Parameter Configuration (Items Requiring Configuration)   B_START_DATE = Any YYYYMMDD [e.g., 20200101]   C_END_DATE = Any YYYYMMDD [e.g., 20200131]    ### ‚ë° Days Ago Mode  This mode creates a calendar starting from today's date and going back a specified number of days.  ‚ñº Parameter Configuration (Prerequisite)   A_DATE_MODE = 1    ‚ñº Parameter Configuration (Items Requiring Configuration)   D_DAYS_AGO = Number of days to go back from today [e.g., -5 (5 days ago)]   E_DAYS_LATER = Number of days to move forward from today [e.g., 2 (2 days later)]    ## Fetching Dates Based on Modes  To calculate dates corresponding to the aforementioned modes, the following approach is taken. The START_DATE and END_DATE are prepared for the later Calendar query.  ![image](/blog/6/template_query.png)  ‚ñº Query: START_DATE  ```text let     // For A_date_mode = 0 (Date Specified)     start_date_0 = Date.FromText(Text.Start(B_START_DATE,4) & \",\" & Text.Middle(B_START_DATE,4,2) & \",\" & Text.End(B_START_DATE,2)),      // For A_date_mode = 1 (Days Ago)     now_1 = DateTime.LocalNow() ,     start_date_1 = DateTime.Date(Date.AddDays(now_1,D_DAYS_AGO)),      // For A_date_mode = 2 (Months Ago)     now_2 = DateTime.LocalNow() ,     start_month_2 = DateTime.Date(Date.AddMonths(now_2,F_MONTHS_AGO)),     start_date_2 = DateTime.Date(Date.AddDays(start_month_2,-Date.Day(start_month_2)+1)),      // Fetching date based on mode     start_date_ori = if A_DATE_MODE = 0 then start_date_0 else (if A_DATE_MODE = 1 then start_date_1 else start_date_2)  in     start_date_ori ```  ‚ñº Query: END_DATE  ```text let     // For A_date_mode = 0 (Date Specified)     end_date_0 = Date.FromText(Text.Start(C_END_DATE,4) & \",\" & Text.Middle(C_END_DATE,4,2) & \",\" & Text.End(C_END_DATE,2)),      // For A_date_mode = 1 (Days Ago)     now_1 = DateTime.LocalNow() ,     end_date_1 = DateTime.Date(Date.AddDays(now_1,E_DAYS_LATER)),      // For A_date_mode = 2 (Months Ago)     now_2 = DateTime.LocalNow() ,     end_date_2 = DateTime.Date(Date.AddDays(now_2,E_DAYS_LATER)),      // Fetching date based on mode     end_date_ori = if A_DATE_MODE = 0 then end_date_0 else (if A_DATE_MODE = 1 then end_date_1 else end_date_2)  in     end_date_ori ```  Create an empty query and use the Advanced Editor to copy and paste the above code to make it usable.  ## Creating the Calendar  The calendar is created for the specified period based on the mode configured in the parameters.  ‚ñº Query: Calendar  ```text let     Source = List.Generate(                     ()=>[Date=START_DATE, DayOfWeek=Date.DayOfWeekName(Date)],                     each [Date]<=END_DATE,                     each [Date=Date.AddDays([Date],1),DayOfWeek=Date.DayOfWeekName(Date)]              ),     Custom = Table.FromRecords(Source),     AddedCustom = Table.AddColumn(Custom, \"YearMonth\", each Number.ToText(Date.Year([Date])) & Text.PadStart(Number.ToText(Date.Month([Date])),2,\"0\")),     InsertedMonthWeek = Table.AddColumn(AddedCustom, \"MonthWeek\", each Date.WeekOfMonth([Date]), Int64.Type) in     InsertedMonthWeek ```  The result of this query will look something like this:  ![image](/blog/6/calendar_sample.png)  This concludes the process of generating a calendar for a specific period.  That's it! "},"_id":"blog/6-custom-calendar-power-query.mdx","_raw":{"sourceFilePath":"blog/6-custom-calendar-power-query.mdx","sourceFileName":"6-custom-calendar-power-query.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/6-custom-calendar-power-query"},"type":"Post","slug":"/blog/6-custom-calendar-power-query","slugAsParams":"6-custom-calendar-power-query"},{"title":"Power Query | How to Load Dynamic SQL Results (Power BI)","description":"I'll explain how to dynamically execute SQL by linking SQL query conditions (e.g., within the WHERE clause) with Power Query parameters.","date":"2020-03-02T00:00:00.000Z","emoji":"üìä","tags":["powerbi"],"published":true,"body":{"raw":" In Power Query, it's common to connect to a database and import SQL results into tables. But what if you want to easily change the SQL query's filtering conditions?  This time, I'll explain how to dynamically execute SQL by linking SQL query conditions (e.g., within the WHERE clause) with Power Query parameters.  ## Query for Executing Dynamic SQL  Here's an example query for executing dynamic SQL:  ```text let // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- // SQL starts here sql1 = \" SELECT   * FROM   test_table WHERE   start_date >= '__start_date__' AND start_date <= '__end_date__' \", // SQL ends here // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----      // Replace SQL variables (e.g., __start_date__ and __end_date__)     sql2 = Text.Replace(sql1, \"__start_date__\", START_DATE),     sql3 = Text.Replace(sql2, \"__end_date__\", END_DATE),      sql = sql3, // Reassign it as 'sql' to prevent errors      Source = Oracle.Database(DB_NAME, [HierarchicalNavigation=true, Query=sql]) in     Source ```  In this example, the flow of operations is as follows:  ### ‚ë† sql1  ```txst // SQL starts here sql1 = \" SELECT   * FROM   test_table WHERE   start_date &gt;= '__start_date__' AND start_date &lt;= '__end_date__' \", // SQL ends here ```  This section contains the base SQL (enclosed within // ---). The parts you want to change dynamically are marked as variables (e.g., `__start_date__` and `__end_date__`).  ### ‚ë° sql2  ```text sql2 = Text.Replace(sql1, \"__start_date__\", START_DATE) ```  `sql2` replaces `__start_date__` in `sql1` with `START_DATE` (a parameter). In this example, `START_DATE` holds a string in the format YYYYMMDD.  ### ‚ë¢ sql3  ```text sql3 = Text.Replace(sql2, \"__end_date__\", END_DATE) ```  `sql3` replaces `__end_date__` in `sql2` with `END_DATE` (a parameter). In this example, `END_DATE` holds a string in the format YYYYMMDD.  ### ‚ë£ sql and Source  ```text     sql = sql3, // Reassign it as 'sql' to prevent errors      Source = Oracle.Database(DB_NAME, [HierarchicalNavigation=true, Query=sql]) ```  `sql3` is stored in `sql`, and then it's applied as an argument to the `Oracle.Database` function. In this example, `DB_NAME` holds the database name (schema).  ___  When you try this, make sure to prepare the necessary parameters and paste the code from an empty query into the Advanced Editor.  By changing parameter settings, you can dynamically modify the SQL extraction results. That's it!"},"_id":"blog/7-dynamic-sql-power-query.mdx","_raw":{"sourceFilePath":"blog/7-dynamic-sql-power-query.mdx","sourceFileName":"7-dynamic-sql-power-query.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/7-dynamic-sql-power-query"},"type":"Post","slug":"/blog/7-dynamic-sql-power-query","slugAsParams":"7-dynamic-sql-power-query"},{"title":"WSF | Executing Processing by Combining and Loading Multiple VBS Scripts (Batch, WSF, VBS Integration)","description":"I will explain how to use it as a package to call multiple VBS files together using WSF.","date":"2020-03-03T00:00:00.000Z","emoji":"üñ•Ô∏è","tags":["wsf","vbs"],"published":true,"body":{"raw":" WSF is an XML file that allows you to consolidate multiple scripts. This enables the reusability of VBS scripts created for various functions, making it extremely convenient. (Additionally, it allows coexistence of JScript and VBS.)  This time, I will explain how to use it as a package to call multiple VBS files together.  [**Source Code is here**](https://github.com/atman-33/template-vbs/tree/master/ExportCsvOracleWsf)  ## Package Structure  Similar to the functionality previously covered in the article [**„ÄêVBS„ÄëSaving SELECT Results from Oracle DB to CSV**](/blog/5-oracle-db-to-csv-vbs) but using a combination of batch, WSF, and VBS, we will achieve the same functionality.  First, let's look at the package structure.  ![image](/blog/8/package.png)  ‚ñº `wsf_oracledb_to_csv` Folder  ```text Main.bat               Main execution file OraclToCsv.wsf         File for loading various VBS Config.ini             File containing various configuration information sql                    SQL statements to extract data from the DB csv                    Folder to store CSV files extracted from the DB vbs                    Folder to store VBS classes and modules ‚îî common               Folder for common classes and modules    ‚îú DatabaseOracle.vbs Oracle DB operation-related class    ‚îú fso.vbs            Functions to manipulate files and folders    ‚îî ini.vbs            Functions to manipulate ini files ```  The WSF file is where VBS scripts are loaded together, allowing you to work with individual functions and classes.  ## Source Code Explanation  Now, let's explain the code for the WSF and BAT files (we'll skip the VBS files as they have already been explained in a separate article).  ### WSF File  WSF files are written in XML format.  In this example, we've referenced classes and functions from various VBS files required for DB connection and CSV output.  ‚ñº `oracledb_to_csv.wsf`  ```wsf <job> <script language=\"vbscript\" src=\".\\vbs\\common\\ini.vbs\"/> <script language=\"vbscript\" src=\".\\vbs\\common\\fso.vbs\"/> <script language=\"vbscript\" src=\".\\vbs\\common\\DatabaseOracle.vbs\"/> <script language=\"vbscript\">      ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     ' brief: Save the results extracted from Oracle DB using a SELECT statement to a CSV     ' note:     ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----      ' Const INI_FILE = \"Config.ini\"     ' Ini file name (can be specified in the BAT file)      Dim SQL_FOLDER_PATH, CSV_FOLDER_PATH     Dim SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS      Dim ini     ' ini = GetCurrentDirectory() & \"\\\" & INI_FILE     ini = GetCurrentDirectory() & \"\\\" & Wscript.Arguments(0)      ' #### #### #### #### #### #### #### #### #### #### #### #### #### #### ####     ' 0. Read the INI file ‚Äª Save it in the same folder as the executing VBS file     SDB_PROVIDER = GetIniData(ini, \"source_db\", \"provider\")     SDB_DATA_SOURCE = GetIniData(ini, \"source_db\", \"data_source\")     SDB_USER = GetIniData(ini, \"source_db\", \"user_id\")     SDB_PASS = GetIniData(ini, \"source_db\", \"password\")      SQL_FOLDER_PATH = GetCurrentDirectory() & \"\\\" & GetIniData(ini, \"path\", \"sql_folder\")     CSV_FOLDER_PATH = GetCurrentDirectory() & \"\\\" & GetIniData(ini, \"path\", \"csv_folder\")     ' #### #### #### #### #### #### #### #### #### #### #### #### #### #### ####      Dim objDBOracle     ' Oracle connection class     Dim strSQLFiles     ' Group of SQL files to execute     Dim strSQLFile      ' SQL file to execute     Dim strSQL          ' SQL to execute     Dim objAdoRS        ' ADO Recordset     Dim csvText         ' CSV text content obtained from SELECT using SQL      WScript.Echo \"Processing started.\"      ' 1. DB connection     Set objDBOracle = New DatabaseOracle     objDBOracle.OpenDBOracle SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS      ' 2. Read SQL files     strSQLFiles = GetFileNames(SQL_FOLDER_PATH)      ' 3. Generate CSV     For Each strSQLFile In strSQLFiles         WScript.Echo strSQLFile         strSQL = GetFileText(strSQLFile)         objDBOracle.excuteSQLgetRS strSQL         csvText = objDBOracle.getCSVTextFromRS()          writeFile CSV_FOLDER_PATH & \"\\\" & GetBaseName(strSQLFile), csvText, \"csv\"     Next      ' 4. Disconnect from DB     objDBOracle.closeDB     Set objDBOracle = Nothing      WScript.Echo \"Processing completed.\"  </script> </job> ```  As shown above, you can load multiple VBS files within a WSF file, and you can also directly include VBS scripts in the WSF file itself.  ### BAT File  ‚ñº `main.bat`  ```batch @echo off  rem To use variables within if and for loops, you can use ! instead of % @setlocal enabledelayedexpansion  rem ---- Configuration ---- set script=OracleToCsv.wsf set ini=Config.ini  cd %~dp0 Cscript %script% %ini%  pause ```  With this setup, the message boxes won't appear when launching the WSF file, and the processing will proceed as intended.\" "},"_id":"blog/8-call-vbs-wsf.mdx","_raw":{"sourceFilePath":"blog/8-call-vbs-wsf.mdx","sourceFileName":"8-call-vbs-wsf.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/8-call-vbs-wsf"},"type":"Post","slug":"/blog/8-call-vbs-wsf","slugAsParams":"8-call-vbs-wsf"},{"title":"JavaScript | Sample of a Shooting Game Using CreateJS and Classes","description":"I tried creating a 'shooting game' using CreateJS and classes (object-oriented).","date":"2020-03-06T00:00:00.000Z","emoji":"üõ∏","tags":["javascript"],"published":true,"body":{"raw":" I tried creating a 'shooting game' using CreateJS and classes (object-oriented).  2020/03/06 Update: I found an issue where declaring fields outside the JavaScript constructor doesn't work on mobile browsers, so I made corrections.  ## Overview This game allows you to move your character using the mouse or touch screen and shoot bullets to defeat enemy aircraft.  [Play the sample game](https://atman-33.github.io/shooting-game-js/)  [Here is the source code](https://github.com/atman-33/shooting-game-js)  ![image](/blog/9/thumbnail.png)  ## Package Structure The structure is as follows:  This time, I prepared three classes, Player (your character), Enemy (opponents), and Bullet (projectiles), inside the 'js/class' folder.  ```text js-shooting-game ‚îú index.html ‚îú css ‚îÇ  ‚îîbase.css ‚îî js    ‚îîclass „ÄÄ    ‚îúPlayer.js „ÄÄ    ‚îúEnemy.js „ÄÄ    ‚îîBullet.js ```  ## Source Code Explanation Each JavaScript class is contained in a separate file, following the Java style. You can include these class files in your main program HTML file (in this case, index.html) to use them.  ### ‚ë† Beginning of the Main Program index.html serves as the page where the shooting game runs. Here, various CSS and JavaScript files are loaded to make the program work.  ```html <html> <head>     <meta charset=\"utf-8\" />     <link rel=\"stylesheet\" href=\"css/base.css\" />      <script src=\"//code.createjs.com/1.0.0/createjs.min.js\"></script>     <script src=\"js/class/Player.js\"></script>     <script src=\"js/class/Bullet.js\"></script>     <script src=\"js/class/Enemy.js\"></script>      <script type=\"text/javascript\">      // The main program continues below     // ...     // ...     // ...  ```  The CreateJS library is loaded initially, allowing you to use CreateJS objects, including the classes you've created.  **Note:** The \"//code.createjs.com/1.0.0/createjs.min.js\" URL format supports both \"http://\" and \"https://\" protocols.  ### ‚ë° Player Class The Player class has the following functionalities:  - Movement to the mouse position - Experience points gained when defeating enemies  **Note:** While one of the expected functionalities for the player is shooting bullets, you've kept that functionality in the main program (index.html) for the sake of simplicity.  Here's the Player.js code:  ```js // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- // Brief: Player Class // Note: ... // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- class Player extends createjs.Shape {     // getters     getX() { return this.x; }   // Return X position.     getY() { return this.y; }   // Return Y position.     getLevel() { return this.level }     getExp() { return this.exp }      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Constructor     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     constructor() {         super();    // Call the parent class constructor          this.x = 0;         this.y = 0;         this.exp = 0;         this.level = 1;          // Define the shape of the player         this.graphics.beginFill(\"white\").moveTo(0, -10).lineTo(-5, 0).lineTo(5, 0).closePath();     }      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Move the player.     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     move(stage) {         // Move the player to the mouse coordinates (with deceleration)         this.x += (stage.mouseX - this.x) * 0.1;         this.y += (stage.mouseY - this.y) * 0.1;     }      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Gain experience points.     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     addExp(exp) {         this.exp = this.exp + exp;         this.level = Math.ceil(this.exp / 500)     } } ```  The Player class extends createjs.Shape, making createjs.Shape the superclass in this context. This approach allows you to reuse the fields and methods of createjs.Shape.  ### ‚ë¢ Enemy Class The Enemy class is almost identical to the Player class, with one key difference. It includes functionality for collision detection with bullets. This functionality is used in the main program to implement the destruction of enemies when hit by player bullets.  Here's the Enemy.js code:  ```js // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- // Brief: Enemy Class // Note: ... // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- class Enemy extends createjs.Shape {     // getters     getX() { return this.x; }   // Return X position.     getY() { return this.y; }   // Return Y position.      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Constructor     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     constructor(stageW, stageH) {         super();    // Call the parent class constructor          this.x = 0;         this.y = 0;          // Define the shape of the enemy         this.graphics.beginFill(\"red\").moveTo(10, -5).lineTo(10, 5).lineTo(5, 5).lineTo(5, 10)             .lineTo(-5, 10).lineTo(-5, 5).lineTo(-10, 5).lineTo(-10, -5).closePath();          // Generate the enemy randomly from the top of the screen         this.x = stageW * Math.random();         this.y = stageH;     }      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Move the enemy.     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     move() {         // Move the enemy         this.y += 1;     }      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Collision detection with player bullets.     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     collideWith(bullet) {         // Get the local coordinates of the bullet relative to the enemy         var pt = bullet.localToLocal(0, 0, this);          // Perform collision detection         return this.hitTest(pt.x, pt.y);     } } ```  In this code, the localToLocal and hitTest   methods are used for collision detection. These details are simplified for explanation, but essentially, it recalculates the position of bullets relative to the enemy and checks whether their shapes overlap.  ### ‚ë£ Bullet Class The Bullet class is also similar to the Player and Enemy classes.  Here's the Bullet.js code:  ```js // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- // Brief: Bullet Class // Note: ... // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- class Bullet extends createjs.Shape {     // getters     getX() { return this.x; }   // Return X position.     getY() { return this.y; }   // Return Y position.      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Constructor     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     constructor(x, y, level) {         super();    // Call the parent class constructor          this.x = x;         this.y = y;         this.level = level;          // Define the shape of the bullet         this.graphics.beginFill(\"white\").drawCircle(0, 0, 3);     }      // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     // Brief: Move the bullet.     // Note: ...     // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----     move() {         // Move the bullet         this.y -= 10 + this.level;     } } ```  ### ‚ë§ Main Program Finally, you have the main program that instantiates and utilizes instances of the Player, Enemy, and Bullet classes.  Here's the continuation of your index.html code:  ```html     // The main program continues here     // ...     // ...     // ...      // Game Over     function showGameOver() {         alert(\"Game Over! Your score was \" + scoreNum + \".\");          // Remove all event listeners         createjs.Ticker.removeAllEventListeners();         stage.removeAllEventListeners();     }      // Game Clear     function showGameClear() {         alert(\"Achievement: \" + scoreNum + \" points! Game Clear!\");          // Remove all event listeners         createjs.Ticker.removeAllEventListeners();         stage.removeAllEventListeners();     } }      </script>  </head> <body>     <canvas id=\"myCanvas\" width=\"540\" height=\"960\"></canvas> </body> </html> ```  In this main program, the initialization and game loop are handled.  - Initialization: The `init` function is executed when the page loads. - Game Loop: The `handleTick` function is called continuously to update the game state, including player movement, enemy generation, bullet movement, collision detection, and updating scores and levels.  This structure and approach are fundamental for developing games and various applications. It's especially useful when creating larger-scale games or applications, as it allows you to organize your code efficiently.  If you have any specific questions or need further clarification on any part of the code, feel free to ask!"},"_id":"blog/9-shooting-game-js.mdx","_raw":{"sourceFilePath":"blog/9-shooting-game-js.mdx","sourceFileName":"9-shooting-game-js.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/9-shooting-game-js"},"type":"Post","slug":"/blog/9-shooting-game-js","slugAsParams":"9-shooting-game-js"}]