[{"title":"VBS | Delete specified file or folder.","description":"Sample source code of a function to delete files and folders using VBS","date":"2020-02-23T00:00:00.000Z","emoji":"üê∂","tags":["vbs"],"published":true,"body":{"raw":" Here is a sample source code of a function to delete files and folders using VBS.  ## Sample Code  ```vb Option Explicit  DeleteFolder \"C:\\sample\" DeleteFile \"C:\\test\\test.txt\"  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' @brief : Delete the specified file. ' @note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub DeleteFile (ByVal strFile)   Dim objFso  Set objFso = CreateObject(\"Scripting.FileSystemObject\")   ' delete file  objFso.DeleteFile strFile,True   Set objFso = Nothing  End Sub  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' @brief : Delete the specified folder. ' @note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub DeleteFolder (ByVal strFolder)   Dim objFso  Set objFso = CreateObject(\"Scripting.FileSystemObject\")   ' delete folder  objFso.DeleteFolder strFolder,True    Set objFso = Nothing  End Sub ```  ## Additional information.  `FileSystemObject.DeleteFolder` Function:    - Parameter 1:    - Folder to be deleted. - Parameter 2:   - True: Delete read-only files as well.   - False (default): Do not delete read-only files."},"_id":"blog/1-delete-file-folder-vbs.mdx","_raw":{"sourceFilePath":"blog/1-delete-file-folder-vbs.mdx","sourceFileName":"1-delete-file-folder-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/1-delete-file-folder-vbs"},"type":"Post","slug":"/blog/1-delete-file-folder-vbs","slugAsParams":"1-delete-file-folder-vbs"},{"title":"VBS | Getting the current folder.","description":"Sample source code of a function in VBS to retrieve the path of the current folder","date":"2020-02-24T00:00:00.000Z","emoji":"üìÅ","tags":["vbs"],"published":true,"body":{"raw":" Here is a sample source code of a function in VBS to retrieve the path of the current folder.  ## Sample Code  ```vb Option Explicit  Msgbox GetCurrentDirectory()  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' breif : Getting the current folder ' note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCurrentDirectory()      Dim objWshShell     ' WshShell object      Set objWshShell = WScript.CreateObject(\"WScript.Shell\")     If Err.Number <> 0 Then         WScript.Echo \"error: \" & Err.Description         wscript.quit(1)     End If     GetCurrentDirectory = objWshShell.CurrentDirectory  End Function ```  ## Explanation  This script retrieves the current folder (also known as the current directory) in which the VBS file (executable file) is located.  *Note: The terms \"current folder\" and \"current directory\" are used interchangeably.*"},"_id":"blog/2-get-current-folder-vbs.mdx","_raw":{"sourceFilePath":"blog/2-get-current-folder-vbs.mdx","sourceFileName":"2-get-current-folder-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/2-get-current-folder-vbs"},"type":"Post","slug":"/blog/2-get-current-folder-vbs","slugAsParams":"2-get-current-folder-vbs"},{"title":"VBS | Retrieving Data from an ini File","description":"This guide explains how to retrieve data stored in a Config.ini file.","date":"2020-02-25T00:00:00.000Z","emoji":"üîß","tags":["vbs"],"published":true,"body":{"raw":" This guide explains how to retrieve data stored in a Config.ini file.  ## Folder Structure Retrieve data contained within the Config.ini as shown in the structure below:  ``` textfile Any Folder  ‚îú Config.ini  ‚îî GetIniData.vbs ```  ## Sample Source  Config.ini:  ``` ini [test1] data1=00000 data2=11111 [test2] data3=abcde data4=fghij ```  GetIniData.vbs:  ``` vb Option Explicit  Msgbox GetIniData(GetCurrentDirectory() & \"\\Config.ini\", \"test1\", \"data1\")  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Get the current directory. ' note:  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCurrentDirectory()      Dim objWshShell     ' WshShell object      Set objWshShell = WScript.CreateObject(\"WScript.Shell\")     If Err.Number <> 0 Then         WScript.Echo \"Error: \" & Err.Description         wscript.quit(1)     End If     GetCurrentDirectory = objWshShell.CurrentDirectory  End Function  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Retrieve data from an INI file using section name and parameter name. ' note : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetIniData(strIniFileName, strSection, strKey)      Dim objFSO, objIniFile, objSectionDic, strReadLine, objKeyDic, arrReadLine     Dim strTempSection, objTempdic      ' File I/O constants     Const conForReading = 1, conForWriting = 2, conForAppending = 8     Set objFSO = CreateObject(\"Scripting.FileSystemObject\")      ' Open the file     Set objIniFile = objFSO.OpenTextFile(strIniFileName, conForReading, False)     If Err.Number <> 0 Then         ' Output an error message         wscript.echo \"INI File Name: \" & strIniFileName         wscript.quit(1)     End If      ' Create a storage Dictionary object     Set objSectionDic = CreateObject(\"Scripting.Dictionary\")      ' Read from the file     strReadLine = objIniFile.ReadLine     Do While objIniFile.AtEndofStream = False         ' Search for the start of a statement         If (strReadLine <> \" \") And (StrComp(\"[]\", (Left(strReadLine, 1) & Right(strReadLine, 1))) = 0) Then             ' Retrieve the section name             strTempSection = Mid(strReadLine, 2, (Len(strReadLine) - 2))             ' Create a Dictionary object for keys             Set objKeyDic = CreateObject(\"Scripting.Dictionary\")             ' Loop until the end of the file             Do While objIniFile.AtEndofStream = False                 strReadLine = objIniFile.ReadLine                 If (strReadLine <> \"\") And (StrComp(\";\", Left(strReadLine, 1)) <> 0) Then                     ' Exit loop when the next statement starts                     If StrComp(\"[]\", (Left(strReadLine, 1) & Right(strReadLine, 1))) = 0 Then                         Exit Do                     End If                     ' Store definitions within a section in the Dictionary object                     arrReadLine = Split(strReadLine, \"=\", 2, vbTextCompare)                     objKeyDic.Add UCase(arrReadLine(0)), arrReadLine(1)                 End If             Loop             ' Store in the object             objSectionDic.Add UCase(strTempSection), objKeyDic         Else             strReadLine = objIniFile.ReadLine         End If     Loop     ' Close the file     objIniFile.Close      ' Retrieve data corresponding to the specified section and parameter from the INI array     strSection = UCase(strSection)  ' Convert to uppercase     strKey = UCase(strKey)          ' Convert to uppercase      If objSectionDic.Exists(strSection) Then         Set objTempdic = objSectionDic.Item(strSection)         If objTempdic.Exists(strKey) Then             GetIniData = objSectionDic(strSection)(strKey)             Exit Function         End If     End If     GetIniData = \"\"  End Function ```  ## Explanation  When extracting data from an INI file, each data from the `Settings.ini` is stored in a dictionary object. Then, you retrieve the data based on the section (e.g., `[test1]`) and parameter name (e.g., `data1`).  In the provided sample, the code is set to read an INI file from the current directory. If you want to reference a different folder, you can modify the code to specify the path of the INI file."},"_id":"blog/3-get-ini-data-vbs.mdx","_raw":{"sourceFilePath":"blog/3-get-ini-data-vbs.mdx","sourceFileName":"3-get-ini-data-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/3-get-ini-data-vbs"},"type":"Post","slug":"/blog/3-get-ini-data-vbs","slugAsParams":"3-get-ini-data-vbs"},{"title":"Scrolling the code embedded in a post of the WordPress Hestia theme horizontally.","description":"This is an article for those using the WordPress theme \"Hestia. \"When embedding source code on a post page, is there a concern that it might wrap and become hard to read?","date":"2020-02-26T00:00:00.000Z","emoji":"üêµ","tags":["wordpress","css"],"published":true,"body":{"raw":" This is an article for those using the WordPress theme \"Hestia.\"  When embedding source code on a post page, is there a concern that it might wrap and become hard to read?  This time, we will explain a solution using additional CSS.  Added on 3/22/2020: It has been discovered that by \"‚ë† selecting the (source code) block\" and then choosing \"‚ë° change block type to Preformatted, \" you can achieve scrollability. This feature is sufficient.  ![image](/blog/4/seikeizumi.png)  ## Making Source Code Display on the Web More Readable  If you have lengthy code samples displayed horizontally like the one below, they might automatically wrap and become difficult to read.  ```py def __line(self, message):     if len(self.line_notify_token) > 0:         requests.post('https://notify-api.line.me/api/notify', headers={'Authorization': 'Bearer ' + self.line_notify_token}, data={'message': '\\n' + message}) ```  ## Additional CSS Setup  Now, let's set up additional CSS to achieve horizontal scrolling for the source code. First, navigate to the Customizer of WordPress and go to the edit screen for additional CSS.  ![image](/blog/4/main.png)  Next, enter the following code:  ![image](/blog/4/add_css.png)  ```css pre.scrollable-code {     overflow-x: auto;     margin-bottom: 1em;     white-space: pre;     max-width: 770px;     word-wrap: normal; } ```  ## Editing Code in the Post Editor  To apply the additional CSS, edit the code directly in the post editor. On the post editing screen, switch to the \"Code Editor\" view.  ![image](/blog/4/code_editer. PNG)  Since it will display HTML, look for the block where you embedded the source code.   It's the part enclosed in `<pre class=\"wp-block-code\"><code>...</code></pre>`.  ```html <!-- wp:code --> <pre class=\"wp-block-code\"><code>    def __line(self, message):         if len(self.line_notify_token) > 0:             requests.post('https://notify-api.line.me/api/notify', headers={'Authorization': 'Bearer ' + self.line_notify_token}, data={'message': '\\n' + message}) </code></pre> <!-- /wp:code --> ```  For the above code, do the following two things: 1. Change the `pre class` from \"wp-block-code\" to \"scrollable-code\". 2. Remove the ``<wp:code></wp:code>`` tags.  It should look like the code below:  ```html <!-- wp:code --> <pre class=\"scrollable-code\">    def __line(self, message):     if len(self.line_notify_token) > 0:         requests.post('https://notify-api.line.me/api/notify', headers={'Authorization': 'Bearer ' + self.line_notify_token}, data={'message': '\\n' + message}) </pre> <!-- /wp:code --> ```  Here is the completed code sample with horizontal scrolling support:  ![image](/blog/4/sample.png)  That's all. "},"_id":"blog/4-scroll-code-wordpress-hestia.mdx","_raw":{"sourceFilePath":"blog/4-scroll-code-wordpress-hestia.mdx","sourceFileName":"4-scroll-code-wordpress-hestia.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/4-scroll-code-wordpress-hestia"},"type":"Post","slug":"/blog/4-scroll-code-wordpress-hestia","slugAsParams":"4-scroll-code-wordpress-hestia"},{"title":"VBS | Saving the results selected from Oracle DB to a CSV file","description":"This time, we will explain a program that uses VBS to save data extracted from an Oracle DB into a CSV file.","date":"2020-02-27T00:00:00.000Z","emoji":"üíø","tags":["vbs","oracle"],"published":true,"body":{"raw":" Is there a need to work with data stored in a database (DB) using a different application?  In such cases, one approach is to first extract the DB data into a CSV file and then read that CSV file from the other application.  ![image](/blog/5/db_to_csv.png)  This time, we will explain a program that uses VBS to save data extracted from an Oracle DB into a CSV file.  The source code can be downloaded from here: ‚Üì   [template-vbs/ExportCsvOracle/](https://github.com/atman-33/template-vbs/tree/master/ExportCsvOracle/ \"Github\")  ## Program Workflow  Although the program's main purpose is to save data extracted from a DB into a CSV file, the general workflow is as follows:  ```text ‚ë† Load necessary configuration information. „ÄÄ‚Üì ‚ë° Connect to the Oracle DB. „ÄÄ‚Üì ‚ë¢ Execute SQL containing the SELECT statement. „ÄÄ‚Üì ‚ë£ Save the executed SQL result to a CSV file. „ÄÄ‚Üì ‚ë§ Disconnect from the Oracle DB. ```  ## Package Structure  The program's functionality isn't contained within a single source file. It involves a folder and file structure, as shown below:  ```text ExportCsvOracle/ ‚îúcsv/ ‚îúsql/ ‚îúConfig.ini ‚îîExportCsvOracle.vbs ```  |Folder/File|Description| |:--|:--| |ExportCsvOracle.vbs|Execution program.| |Config.ini|Configuration information for DB connections and folder paths.| |sql (Folder)|Contains files storing the SELECT statements.| |csv (Folder)|Stores CSV files extracted from the DB.|  ## Explanation of Source Code  For program execution, configuration information will be loaded from an INI file.  ‚ñº Config.ini ```ini [source_db] provider=OraOLEDB.Oracle data_source=TESTDB user_id=system password=sys [path] sql_folder=sql csv_folder=csv ```  The INI file in this case contains the following information:  - Connection information to the DB (Oracle) - Folder name (path) for storing SQL statements - Folder name (path) for storing generated CSV files  This information from the INI file is read and stored in variables within the VBS script for later use. For more details on this process, you can refer to a separate article: [VBS | Getting Data from an INI File](/blog/3-get-ini-data-vbs)  ## Connecting to the Oracle DB  In this section, we prepare functions necessary for various operations with the Oracle DB.  ```vb ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Connect to the DB (Oracle) ' note : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub OpenDBOracle(ByRef objAdoCon, provider, dataSource, user, pass)      If DEBUG_MODE = 1 Then         WScript.Echo \"Connecting to the DB.\"     End If      Dim constr      Set objAdoCon = WScript.CreateObject(\"ADODB.Connection\")      constr = \"Provider=\" & provider & \";Data Source=\" & dataSource _                 & \";User ID=\" & user & \";Password=\" & pass      If DEBUG_MODE = 1 Then         WScript.Echo constr     End If      objAdoCon.ConnectionString = constr     objAdoCon.Open      If DEBUG_MODE = 1 Then         WScript.Echo \"Connected to the DB.\"     End If  End Sub  ' ... (Other DB-related functions) ```  In this context, we will only be using the DB connection and disconnection functions.  You can utilize the variables read from the earlier INI file to perform DB operations like this:  ```vb Dim objAdoCon       ' ADO connection  ' 1. Connect to the DB OpenDBOracle objAdoCon, SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS  ... ... ...  ' 4. Disconnect from the DB CloseDB objAdoCon Set objAdoCon = Nothing ```  ## Executing SQL Statements  Now that we have established a connection to the Oracle DB, let's proceed to explain how to execute SQL statements and retrieve record sets. The workflow for this section is as follows:  Retrieve SQL files from the SQL storage folder **‚Äª One SELECT statement per SQL file**   „ÄÄ‚Üì   Extract SQL statements from SQL files   „ÄÄ‚Üì   Execute SQL statements and retrieve record sets    First, we will prepare functions needed for each step:  ```vb ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Execute SQL SELECT statement and retrieve record set ' note : Return -> Record Set ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function ExcuteSQLgetRS(objAdoCon, strSQL)      Dim objAdoRS  ' Record Set      Set objAdoRS = objAdoCon.Execute(strSQL)      Set ExcuteSQLgetRS = objAdoRS   ' Remember to use Set for objects  End Function  ' ... (Other functions) ```  With these functions, you can proceed to execute SQL statements and retrieve record sets. Though I'll skip detailed explanations, the record set will contain information from the extraction result specified in the SQL SELECT statement.  You can call these functions within your main program code:  ```vb Dim objAdoCon       ' ADO connection Dim strSQLFiles     ' SQL file collection to execute Dim strSQLFile      ' SQL file to execute Dim strSQL          ' SQL to execute Dim objAdoRS        ' ADO record set Dim csvText         ' CSV text obtained from SELECT query  ' 1. Connect to the DB OpenDBOracle objAdoCon, SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS  ' 2. Read SQL file collection strSQLFiles = GetFileNames(SQL_FOLDER_PATH)  ' 3. CSV generation For Each strSQLFile In strSQLFiles                      ' Iterate through each SQL file     strSQL = GetFileText(strSQLFile)                    ' Retrieve the SQL statement     Set objAdoRS = ExcuteSQLgetRS(objAdoCon, strSQL)    ' Execute the SQL statement and get the record set     csvText = GetCSVTextFromRS(objAdoRS)                ' Convert the record set to CSV-formatted text      WriteFile CSV_FOLDER_PATH & \"\\\" & GetBaseName(strSQLFile), csvText, \"csv\"   ' Generate CSV file Next ```  This completes the creation of CSV files.  ## Saving Executed SQL Results to CSV Files  Until now, the SQL results have been stored in a record set. However, to save the data in CSV format, you need to convert the record set into a text format compatible with CSV.  The workflow here is as follows  :  ‚ë† Convert the record set to CSV (text)   „ÄÄ‚Üì   ‚ë° Write the converted text to a CSV file    ```vb ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Convert record set to CSV ' note : Return -> CSV-formatted text ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCSVTextFromRS(ByRef objAdoRS)      Dim csvText     Dim i      csvText = \"\"     Do While objAdoRS.EOF <> True          For i = 0 to objAdoRS.fields.count -1             If i <> objAdoRS.fields.count -1 then                 csvText = csvText & objAdoRS(i).value & \", \"             Else                 csvText = csvText & objAdoRS(i).value             End If         Next         csvText = csvText & vbCrLf         objAdoRS.MoveNext     Loop      objAdoRS.Close     Set objAdoRS = Nothing      If DEBUG_MODE = 1 Then         WScript.Echo csvText     End If     GetCSVTextFromRS = csvText  End Function  ' ... (Other functions) ```  You can incorporate these functions into your main program by adding the following code:  ```vb Dim objAdoCon       ' ADO connection Dim strSQLFiles     ' SQL file collection to execute Dim strSQLFile      ' SQL file to execute Dim strSQL          ' SQL to execute Dim objAdoRS        ' ADO record set Dim csvText         ' CSV text obtained from SELECT query  ' 1. Connect to the DB OpenDBOracle objAdoCon, SDB_PROVIDER, SDB_DATA_SOURCE, SDB_USER, SDB_PASS  ' 2. Read SQL file collection strSQLFiles = GetFileNames(SQL_FOLDER_PATH)  ' 3. CSV generation For Each strSQLFile In strSQLFiles                      ' Iterate through each SQL file     strSQL = GetFileText(strSQLFile)                    ' Retrieve the SQL statement     Set objAdoRS = ExcuteSQLgetRS(objAdoCon, strSQL)    ' Execute the SQL statement and get the record set     csvText = GetCSVTextFromRS(objAdoRS)                ' Convert the record set to CSV-formatted text      WriteFile CSV_FOLDER_PATH & \"\\\" & GetBaseName(strSQLFile), csvText, \"csv\"   ' Generate CSV file Next  ' 4. Disconnect from the DB CloseDB objAdoCon Set objAdoCon = Nothing  If DEBUG_MODE = 1 Then     WScript.Echo \"Process completed.\" End If ```  This concludes the explanation. Using this sample as a base, you can easily implement tasks like extracting the latest logs from a table in the database every hour. For automated repetitive execution, consider using the Task Scheduler on Windows. "},"_id":"blog/5-oracle-db-to-csv-vbs.mdx","_raw":{"sourceFilePath":"blog/5-oracle-db-to-csv-vbs.mdx","sourceFileName":"5-oracle-db-to-csv-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/5-oracle-db-to-csv-vbs"},"type":"Post","slug":"/blog/5-oracle-db-to-csv-vbs","slugAsParams":"5-oracle-db-to-csv-vbs"}]