[{"title":"VBS | Delete specified file or folder.","description":"Sample source code of a function to delete files and folders using VBS","date":"2020-02-23T00:00:00.000Z","emoji":"üê∂","tags":["vbs"],"published":true,"body":{"raw":" Here is a sample source code of a function to delete files and folders using VBS.  ## Sample Code  ```vb Option Explicit  DeleteFolder \"C:\\sample\" DeleteFile \"C:\\test\\test.txt\"  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' @brief : Delete the specified file. ' @note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub DeleteFile (ByVal strFile)   Dim objFso  Set objFso = CreateObject(\"Scripting.FileSystemObject\")   ' delete file  objFso.DeleteFile strFile,True   Set objFso = Nothing  End Sub  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' @brief : Delete the specified folder. ' @note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Sub DeleteFolder (ByVal strFolder)   Dim objFso  Set objFso = CreateObject(\"Scripting.FileSystemObject\")   ' delete folder  objFso.DeleteFolder strFolder,True    Set objFso = Nothing  End Sub ```  ## Additional information.  `FileSystemObject.DeleteFolder` Function:    - Parameter 1:    - Folder to be deleted. - Parameter 2:   - True: Delete read-only files as well.   - False (default): Do not delete read-only files."},"_id":"blog/1-delete-file-folder-vbs.mdx","_raw":{"sourceFilePath":"blog/1-delete-file-folder-vbs.mdx","sourceFileName":"1-delete-file-folder-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/1-delete-file-folder-vbs"},"type":"Post","slug":"/blog/1-delete-file-folder-vbs","slugAsParams":"1-delete-file-folder-vbs"},{"title":"VBS | Getting the current folder.","description":"Sample source code of a function in VBS to retrieve the path of the current folder","date":"2020-02-24T00:00:00.000Z","emoji":"üìÅ","tags":["vbs"],"published":true,"body":{"raw":" Here is a sample source code of a function in VBS to retrieve the path of the current folder.  ## Sample Code  ```vb Option Explicit  Msgbox GetCurrentDirectory()  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' breif : Getting the current folder ' note  : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCurrentDirectory()      Dim objWshShell     ' WshShell object      Set objWshShell = WScript.CreateObject(\"WScript.Shell\")     If Err.Number <> 0 Then         WScript.Echo \"error: \" & Err.Description         wscript.quit(1)     End If     GetCurrentDirectory = objWshShell.CurrentDirectory  End Function ```  ## Explanation  This script retrieves the current folder (also known as the current directory) in which the VBS file (executable file) is located.  *Note: The terms \"current folder\" and \"current directory\" are used interchangeably.*"},"_id":"blog/2-get-current-folder-vbs.mdx","_raw":{"sourceFilePath":"blog/2-get-current-folder-vbs.mdx","sourceFileName":"2-get-current-folder-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/2-get-current-folder-vbs"},"type":"Post","slug":"/blog/2-get-current-folder-vbs","slugAsParams":"2-get-current-folder-vbs"},{"title":"VBS | Retrieving Data from an ini File","description":"This guide explains how to retrieve data stored in a Config.ini file.","date":"2020-02-25T00:00:00.000Z","emoji":"üîß","tags":["vbs"],"published":true,"body":{"raw":" This guide explains how to retrieve data stored in a Config.ini file.  ## Folder Structure Retrieve data contained within the Config.ini as shown in the structure below:  ``` textfile Any Folder  ‚îú Config.ini  ‚îî GetIniData.vbs ```  ## Sample Source  Config.ini:  ``` ini [test1] data1=00000 data2=11111 [test2] data3=abcde data4=fghij ```  GetIniData.vbs:  ``` vb Option Explicit  Msgbox GetIniData(GetCurrentDirectory() & \"\\Config.ini\", \"test1\", \"data1\")  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Get the current directory. ' note:  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetCurrentDirectory()      Dim objWshShell     ' WshShell object      Set objWshShell = WScript.CreateObject(\"WScript.Shell\")     If Err.Number <> 0 Then         WScript.Echo \"Error: \" & Err.Description         wscript.quit(1)     End If     GetCurrentDirectory = objWshShell.CurrentDirectory  End Function  ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ' brief: Retrieve data from an INI file using section name and parameter name. ' note : ' ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- Function GetIniData(strIniFileName, strSection, strKey)      Dim objFSO, objIniFile, objSectionDic, strReadLine, objKeyDic, arrReadLine     Dim strTempSection, objTempdic      ' File I/O constants     Const conForReading = 1, conForWriting = 2, conForAppending = 8     Set objFSO = CreateObject(\"Scripting.FileSystemObject\")      ' Open the file     Set objIniFile = objFSO.OpenTextFile(strIniFileName, conForReading, False)     If Err.Number <> 0 Then         ' Output an error message         wscript.echo \"INI File Name: \" & strIniFileName         wscript.quit(1)     End If      ' Create a storage Dictionary object     Set objSectionDic = CreateObject(\"Scripting.Dictionary\")      ' Read from the file     strReadLine = objIniFile.ReadLine     Do While objIniFile.AtEndofStream = False         ' Search for the start of a statement         If (strReadLine <> \" \") And (StrComp(\"[]\", (Left(strReadLine, 1) & Right(strReadLine, 1))) = 0) Then             ' Retrieve the section name             strTempSection = Mid(strReadLine, 2, (Len(strReadLine) - 2))             ' Create a Dictionary object for keys             Set objKeyDic = CreateObject(\"Scripting.Dictionary\")             ' Loop until the end of the file             Do While objIniFile.AtEndofStream = False                 strReadLine = objIniFile.ReadLine                 If (strReadLine <> \"\") And (StrComp(\";\", Left(strReadLine, 1)) <> 0) Then                     ' Exit loop when the next statement starts                     If StrComp(\"[]\", (Left(strReadLine, 1) & Right(strReadLine, 1))) = 0 Then                         Exit Do                     End If                     ' Store definitions within a section in the Dictionary object                     arrReadLine = Split(strReadLine, \"=\", 2, vbTextCompare)                     objKeyDic.Add UCase(arrReadLine(0)), arrReadLine(1)                 End If             Loop             ' Store in the object             objSectionDic.Add UCase(strTempSection), objKeyDic         Else             strReadLine = objIniFile.ReadLine         End If     Loop     ' Close the file     objIniFile.Close      ' Retrieve data corresponding to the specified section and parameter from the INI array     strSection = UCase(strSection)  ' Convert to uppercase     strKey = UCase(strKey)          ' Convert to uppercase      If objSectionDic.Exists(strSection) Then         Set objTempdic = objSectionDic.Item(strSection)         If objTempdic.Exists(strKey) Then             GetIniData = objSectionDic(strSection)(strKey)             Exit Function         End If     End If     GetIniData = \"\"  End Function ```  ## Explanation  When extracting data from an INI file, each data from the `Settings.ini` is stored in a dictionary object. Then, you retrieve the data based on the section (e.g., `[test1]`) and parameter name (e.g., `data1`).  In the provided sample, the code is set to read an INI file from the current directory. If you want to reference a different folder, you can modify the code to specify the path of the INI file."},"_id":"blog/3-get-ini-data-vbs.mdx","_raw":{"sourceFilePath":"blog/3-get-ini-data-vbs.mdx","sourceFileName":"3-get-ini-data-vbs.mdx","sourceFileDir":"blog","contentType":"mdx","flattenedPath":"blog/3-get-ini-data-vbs"},"type":"Post","slug":"/blog/3-get-ini-data-vbs","slugAsParams":"3-get-ini-data-vbs"}]